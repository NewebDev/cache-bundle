PHY/CacheBundle - Simple Symfony2 wrapper around the more common caches.
================================================================================


Simple enough to use cache wrapper for Symfony2. Right now supports APC, Local Disk, Memcache, and Memcached.

Install
-----

To include this along with your Symfony2 project then you can just include this in your composer config:

```
"require": {
    "phy/cache-bundle": "dev-master"
}
```

And update composer accordingly.

Configuration
-----

Here's an example of our services.yml, you don't really need to change this since values come from parameters.yml

```yaml
services:
  phy_cache.client:
    class: %phy_cache.class%
    arguments: [ %phy_cache.settings% ]
  phy_cache:
    class: PHY\CacheBundle\Cache
    arguments: [ '@phy_cache.client' ]
    calls:
      - [ setExpiration, [ %phy_cache.expiration% ] ]
      - [ setCompression, [ %phy_cache.compression% ] ]
      - [ setPrefix, [ %phy_cache.prefix% ] ]
```

Here's how you'd setup some common caches in your parameters.yml

Memcache
```yaml
parameters:
    phy_cache.class: PHY\CacheBundle\Cache\Memcache
    phy_cache.settings:
      server: [ 127.0.0.1:11211 ]
    phy_cache.prefix: phy_
    phy_cache.expiration: 300
    phy_cache.compression: 0
```

Disk
```yaml
parameters:
    phy_cache.class: PHY\CacheBundle\Cache\Disk
    phy_cache.settings:
      location: '/var/tmp/cache/'
    phy_cache.expiration: 300
    phy_cache.compression: 0
```

Apc
```yaml
parameters:
    phy_cache.class: PHY\CacheBundle\Cache\Apc
    phy_cache.settings:
      mode: opcode
    phy_cache.prefix: phy_
    phy_cache.expiration: 300
    phy_cache.compression: 0
```

Usage
-----

To call the cache inside your controller (or any container aware class) you just need to call it by its service name.

```php
$cache = $this->container->get('phy_cache');
```

From there, you can start setting, getting, replacing, incrementing, decrementing, and so forth.

```php
$id = 1;
$cache = $this->container->get('phy_cache');
$hashKey = 'someModel/'.$id;

if(!$someModel = $cache->get($hashKey)) {
    $someModel = $this->loadModel($id);
    $cache->set($hashKey, $someModel, 300);
    $cache->increment($hashKey.'/loads', 1);
}
```

All methods available are almost 100% equal to [\Memcache](php.net/manual/en/class.memcache.php).

Command Line
------------

There are two command line options.

Check current running stats (Needs some style and extra functionality)
```
php app/console phy:cache:stats
```

And flushing your cache completely
```
php app/console phy:cache:flush
```

About
-----

Originally was using [BerylliumCacheBundle](https://github.com/beryllium/CacheBundle) by
[Kevin Boyd](https://github.com/beryllium). Got the job done for the most part but I needed to compress some rather
large aggregate results from MongoDB. Made a pull request to add the compression on and noticed certain other functions
weren't quite implemented yet. Having already done a similar bundle for Cache (albeit not for Symfony2) figured I could
just port that over and here we are.

Requirements
------------

- PHP 5.3+

Submitting bugs and feature requests
------------------------------------

Please send bugs to me via
[GitHub](https://github.com/mullanaphy/CacheBundle/issues)

Author
------

John Mullanaphy - <john@jo.mu> - <http://jo.mu/>
That's it for now...

License
-------

PHY/CacheBundle is licensed under the Open Software License (OSL 3.0) -
see the `LICENSE` file for details

Acknowledgements
----------------

- [Kevin Boyd](https://github.com/beryllium)

TODO
----

- Tests, Tests, TESTS!
